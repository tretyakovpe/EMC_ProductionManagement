@model IEnumerable<ProductionManagement.Models.Line>
@{
	Layout = "_Layout";
}
<div class="container-fluid">
	<div class="row">
		<p>
			@Html.ActionLink("Добавить", "Details", "Lines", new { mode = "create" }, new { @class = "btn btn-primary btn-sm" })
		</p>
	</div>

	<div class="row">
		<div class="col-sm-8 border">
			<div class="table-responsive">
				<div class="d-flex flex-column justify-content-center">
					@foreach (var item in Model)
					{
						<div class="d-flex align-items-center py-2 table-row">
							<div class="flex-shrink-0 me-3">
								<div class="progress-container">
									<div class="progress-cell" id="progress-cell-@item.Name">&nbsp;</div>
								</div>
							</div>
							<div class="flex-grow-1 px-2">
								<span id="line-@item.Name" class="rounded-circle p-2 @(item.IsOnline ? "bg-success" : "bg-danger")" width="48" height="48">
									@item.Name
								</span>
								<span class="px-2 fs-6">
									@item.Ip
								</span>
							</div>
							<div class="flex-grow-1 px-2">
								<span id="type-label-@item.Name" class="px-2 fs-6"></span>
								<span id="counter-label-@item.Name" class="px-2 fs-6"></span>
							</div>
							<div class="flex-shrink-0 ms-auto">
								@Html.ActionLink("📦", "Last50", "Prod", new { line = item.Name, printer = item.Printer }, new { @title = "Продукция", @class = "btn btn-outline-secondary" })
								@Html.ActionLink("🚫", "Last50ByLine", "PartNok", new { line = item.Name }, new { @title = "Дефекты", @class = "btn btn-outline-danger" })
								@Html.Raw("<a class=\"btn btn-outline-secondary\" target=\"_blank\" href=\"" + Url.Content("//" + item.Printer.Trim() + ".emc-tlt.tech") + "\" title=\"" + Html.Encode(item.Printer.Trim()) + "\">🖨️</a>")
								@Html.ActionLink("⚙️", "Details", "Lines", new { id = item.Name, mode = "edit" }, new { @title = "Настройка", @class = "btn btn-outline-secondary"})
							</div>
						</div>
					}
				</div>
			</div>
		</div>

		<div class="col-sm-4">
			<div class="log-container bg-dark-subtle" style="height:550px; max-height:550px; overflow-y:auto;">
				<pre id="log-output" style="font-family: monospace; font-size: 10px; width: 100%; height: 100%; white-space: pre-wrap;"></pre>
			</div>
		</div>
	</div>
</div>
<script>
	const connection = new signalR.HubConnectionBuilder()
		.withUrl("/loghub")
		.configureLogging(signalR.LogLevel.Information)
		.build();

	connection.start().then(() => {
		const logs = document.getElementById("log-output");
		logs.textContent += "SignalR connected\n";
		scrollIfNeeded(logs);
	}).catch((err) => console.error(err.toString()));

	connection.on("ReceiveLog", (message) => {
		const logs = document.getElementById("log-output");
		logs.textContent = message+logs.textContent;
		scrollIfNeeded(logs);
	});

	// Функция проверки и автоскроллинга
	function scrollIfNeeded(element) {
		if ((element.scrollHeight - element.clientHeight) <= element.scrollTop + 1) {
			element.scrollTop = element.scrollHeight; // Прокручиваем вниз, если скролл внизу
		}
	}
	connection.on('UpdateCell', function(Id, type, counter, volume) {
		const cellElement = document.getElementById("progress-cell-" + Id+" ");
		const counterLabel = document.getElementById("counter-label-" + Id+" ");
		const typeLabel = document.getElementById("type-label-" + Id+" ");

		if (cellElement) {
			// Обновляем стиль псевдоэлемента ::before напрямую
			let percent = counter;
			if (volume!=0){
				percent = (counter/volume)*100;
			}
			cellElement.style.setProperty('height', `${percent}%`);
			cellElement.setAttribute('title',counter);
			counterLabel.innerText = counter+"/"+volume;
			typeLabel.innerText = type;
		} else {
			console.error("Не найден элемент с id:", "progress-cell-" + Id);
		}
	});
</script>
